<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.smacker" />
	

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		<property name="minPoolSize" value="${jdbc.miniPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"/>  
		<property name="initialPoolSize" value="${jdbc.initialPoolSize}"/>
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"/>
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"/>
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"/>
		<property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}"/>
		<property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
		<property name="automaticTestTable" value="${jdbc.automaticTestTable}"/>
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
		<property name="checkoutTimeout" value="${jdbc.checkoutTimeout}"/>
	</bean>
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<value>classpath:jdbc.properties</value>
		</property>
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>com.smacker.bean.User</value>
				<value>com.smacker.bean.Commodity</value>
				<value>com.smacker.bean.Order</value>
				<value>com.smacker.bean.UserId_CommodityId</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
				<!-- <prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop> -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>
	
	<!-- 创建定义hibernateTemplat -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property><!-- 将hibernateTemplate需要的sessionFactory进入注入 -->
	</bean>
	<!-- 创建定义HibernateTransactionManager的事务 -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" /><!-- 将事务需要的sessionFactory进入注入 -->
	</bean>
	
	<!-- 使用xml事务 ,推荐使用-->
	<aop:config>
		<aop:pointcut id="businessService" expression="execution(public * com.smacker.dao..*.*(..))" /><!-- 定义一个事务执行的切面 -->
		<aop:advisor pointcut-ref="businessService" advice-ref="tx-advice" /><!-- 将具体的事物实现进行注入 -->
	</aop:config>
	<tx:advice id="tx-advice" transaction-manager="txManager"><!-- 设置具体事务的属性，以供在advisor中使用，有些方法需要用到readOnly，有些不需要，提高性能 -->
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
</beans>